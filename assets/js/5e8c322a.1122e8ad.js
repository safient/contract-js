"use strict";(self.webpackChunkcontract_js_docs=self.webpackChunkcontract_js_docs||[]).push([[597],{7926:function(t,e,n){n.r(e),n.d(e,{frontMatter:function(){return l},contentTitle:function(){return o},metadata:function(){return c},toc:function(){return d},default:function(){return u}});var a=n(7462),i=n(3366),r=(n(7294),n(3905)),s=["components"],l={id:"index",title:"@safient/contracts",slug:"/api/",sidebar_label:"Readme",sidebar_position:0,custom_edit_url:null},o="Safient Contracts SDK",c={unversionedId:"api/index",id:"api/index",isDocsHomePage:!1,title:"@safient/contracts",description:"JavaScript SDK to manage and interact with the safe claims on Safient protocol.",source:"@site/docs/api/index.md",sourceDirName:"api",slug:"/api/",permalink:"/api/",editUrl:null,tags:[],version:"current",sidebarPosition:0,frontMatter:{id:"index",title:"@safient/contracts",slug:"/api/",sidebar_label:"Readme",sidebar_position:0,custom_edit_url:null}},d=[{value:"Local installation",id:"local-installation",children:[],level:2},{value:"Running tests",id:"running-tests",children:[{value:"Testing the contracts",id:"testing-the-contracts",children:[],level:4},{value:"Testing the JS SDK",id:"testing-the-js-sdk",children:[],level:4},{value:"Testing the contract &amp; SDK",id:"testing-the-contract--sdk",children:[],level:4}],level:2},{value:"Getting started",id:"getting-started",children:[],level:2},{value:"Usage",id:"usage",children:[],level:2},{value:"Initialization",id:"initialization",children:[],level:2},{value:"Building docs",id:"building-docs",children:[],level:2}],p={toc:d};function u(t){var e=t.components,n=(0,i.Z)(t,s);return(0,r.kt)("wrapper",(0,a.Z)({},p,n,{components:e,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"safient-contracts-sdk"},"Safient Contracts SDK"),(0,r.kt)("p",null,"JavaScript SDK to manage and interact with the safe claims on Safient protocol."),(0,r.kt)("h2",{id:"local-installation"},"Local installation"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"  git clone https://github.com/safient/safient-contract-js.git\n  cd safient-contract-js\n  npm install\n")),(0,r.kt)("h2",{id:"running-tests"},"Running tests"),(0,r.kt)("p",null,"Create a .env file in the root directory with ",(0,r.kt)("inlineCode",{parentName:"p"},"INFURA_API_KEY")," for mainnet or testnet deployment."),(0,r.kt)("h4",{id:"testing-the-contracts"},"Testing the contracts"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"  npm run test-contract\n")),(0,r.kt)("h4",{id:"testing-the-js-sdk"},"Testing the JS SDK"),(0,r.kt)("p",null,"Run a local blockchain"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"  npm run chain\n")),(0,r.kt)("p",null,"Deploy the contract, run the test on a different terminal"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"  npm run deploy-sdk\n  npm run test-sdk\n")),(0,r.kt)("h4",{id:"testing-the-contract--sdk"},"Testing the contract & SDK"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"  npm run deploy-sdk\n  npm run tests\n")),(0,r.kt)("h2",{id:"getting-started"},"Getting started"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"  npm i @safient/contracts\n")),(0,r.kt)("h2",{id:"usage"},"Usage"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"// If not injected web3 provider, create a jsonRpcProvider\nconst { JsonRpcProvider } = require('@ethersproject/providers');\nconst provider = new JsonRpcProvider('http://localhost:8545');\n\n// Get signer and chainId from provider\n(async () => {\n  const signer = await provider.getSigner();\n  const providerNetwork = await provider.getNetwork();\n  const chainId = providerNetwork.chainId;\n})();\n")),(0,r.kt)("h2",{id:"initialization"},"Initialization"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"import { SafientMain, Arbitrator, Types } from '@safient/contracts';\n\nconst safientMain = new SafientMain(signer, chainId);\nconst arbitrator = new Arbitrator(signer, chainId);\n")),(0,r.kt)("h2",{id:"building-docs"},"Building docs"),(0,r.kt)("p",null,"Update the docs markdown"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"npm run build:docs\n")),(0,r.kt)("p",null,"Run the docusaurus website locally"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"npm run serve:docs\n")))}u.isMDXComponent=!0}}]);